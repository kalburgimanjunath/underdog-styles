doctype html
html
  head
    title Underdog.io UI Kit
    link(rel="stylesheet", type="text/css", href="//fonts.googleapis.com/css?family=Open+Sans:400,400italic,600")
    link(rel="stylesheet", type="text/css", href="/dist/css/underdog.css")
    style.
     .greybox {
       background-color: #CCC;
       color: #FFF;
       text-align: center;
     }
    script.
      // Handle any clicks to `a.media-query` elements
      document.addEventListener('click', function handleMediaQueryOnClick (evt) {
        // The element clicked
        var elm = evt.target;

        // Do not handle any clicks to elements which are not our `a.media-query` elements
        if (!elm.matches('a.media-query')) {
          return;
        }

        // Open new popup window with the current device height and desired browser width
        var width = elm.attributes['data-width'].value;
        var height = window.screen.height;
        var options = 'width=' + width + ',height=' + height;
        window.open(window.location.toString(), elm.innerText, options);

        // Prevent the browser from following the link
        evt.preventDefault();
        return false;
      });
  body
    .container
      h1 Underdog.io UI tool kit
    #toc.section-divider
      .section-divider__heading Table of contents
    .container
      ul
        li
          a(href="#media-queries") Custom media queries
        li
          a(href="#grids") Grids
        li
          a(href="#icons") Icons
        li
          a(href="#links") Links
        li
          a(href="#hiding-elements") Hiding elements
        li
          a(href="#borders") Borders
        li
          a(href="#header") Header
        li
          a(href="#buttons") Buttons
        li
          a(href="#forms") Forms
        li
          a(href="#alerts") Alerts
        li
          a(href="#sections") Sections
        li
          a(href="#section-divider") Section divider
        li
          a(href="#sidebar") Sidebar
    #media-queries.section-divider
      .section-divider__heading Custom media queries
      .section-divider__links
        a(href="#toc") Scroll to top
    .container
      p Click on media query to open popup window with the given browser width.
      ul
        li
          a.media-query(href="#", data-width="530") small - 530px
        li
          a.media-query(href="#", data-width="768") medium - 768px
        li
          a.media-query(href="#", data-width="1024") large - 1024px
        li
          a.media-query(href="#", data-width="1400") extra-large - 1400px
    #grids.section-divider
      .section-divider__heading Grids
      .section-divider__links
        a(href="#toc") Scroll to top
    .container
      p.
        We use a nestable fluid 12 column grid system which supports our custom breakpoints.
      .row
        .col-12
          p.greybox col-12
      .row
        .col-6
          p.greybox col-6
        .col-3
          p.greybox col-3
        .col-3
          p.greybox col-3
      .row
        .col-4
          p.greybox col-4
        .col-4
          p.greybox col-4
        .col-2
          p.greybox col-2
        .col-2
          p.greybox col-2
      .row
        .col-1
          p.greybox col-1
        .col-1
          p.greybox col-1
        .col-1
          p.greybox col-1
        .col-1
          p.greybox col-1
        .col-1
          p.greybox col-1
        .col-1
          p.greybox col-1
        .col-1
          p.greybox col-1
        .col-1
          p.greybox col-1
        .col-1
          p.greybox col-1
        .col-1
          p.greybox col-1
        .col-1
          p.greybox col-1
        .col-1
          p.greybox col-1
      .row
        .col-6
          .row
            .col-12
              p.greybox Nested col-12
        .col-6
          .row
            .col-12
              p.greybox Nested col-12
      .row
        .col-6-large-and-up.col-4-medium-and-down
          p.greybox One half/One third
        .col-3-large-and-up.col-4-medium-and-down
          p.greybox One quarter/One third
        .col-3-large-and-up.col-4-medium-and-down
          p.greybox One quarter/One third
      h2 Column offsets
      p Just like our normal columns we can offset using the <code>.offset-{column}</code> or <code>.offset-{column}-{media-query}</code> class names.
      p For example to create a centered grid.
      .row
        .col-8.offset-2
          p.greybox col-8 offset-2
      .row
        .col-5
          p.greybox col-5
        .col-5.offset-2
          p.greybox col-5 offset-2
      .row
        .col-6-medium-and-up.offset-3-medium-and-up.col-12-small
          p.greybox Responsive column with offset
      h2 Examples
      p A simple grid.
      pre
        code
          = '<div class="row">\n'
          = '  <div class="col-6">\n'
          = '    One half\n'
          = '  </div>\n'
          = '  <div class="col-3">\n'
          = '    One quarter\n'
          = '  </div>\n'
          = '  <div class="col-3">\n'
          = '    One quarter\n'
          = '  </div>\n'
          = '</div>'
      p Grid with responsive breakpoints.
      pre
        code
          = '<div class="row">\n'
          = '  <div class="col-6-large-and-up col-4-medium-and-down">\n'
          = '    One half\n'
          = '  </div>\n'
          = '  <div class="col-3-large-and-up col-4-medium-and-down">\n'
          = '    One quarter\n'
          = '  </div>\n'
          = '  <div class="col-3-large-and-up col-4-medium-and-down">\n'
          = '    One quarter\n'
          = '  </div>\n'
          = '</div>'
      p Nested grids.
      pre
        code
          = '<div class="row">\n'
          = '  <div class="col-6">\n'
          = '    <div class="row">\n'
          = '      <div class="col-12">\n'
          = '        One whole\n'
          = '      </div>\n'
          = '    </div>\n'
          = '  </div>\n'
          = '  <div class="col-6">\n'
          = '    <div class="row">\n'
          = '      <div class="col-12">\n'
          = '        One whole\n'
          = '      </div>\n'
          = '    </div>\n'
          = '  </div>\n'
          = '</div>'
    #icons.section-divider
      .section-divider__heading Icons
      .section-divider__links
        a(href="#toc") Scroll to top
    .container
      ul
        li
          span.icon.icon-arrow= ' Arrow'
        li
          span.icon.icon-back= ' Back'
        li
          span.icon.icon-close= ' Close'
        li
          span.icon.icon-copy-link= ' Copy link'
        li
          span.icon.icon-dribble= ' Dribble'
        li
          span.icon.icon-filter= ' Filter'
        li
          span.icon.icon-github= ' GitHub'
        li
          span.icon.icon-linkedin= ' LinkedIn'
        li
          span.icon.icon-location= ' Location'
        li
          span.icon.icon-locked= ' Locked'
        li
          span.icon.icon-menu= ' Menu'
        li
          span.icon.icon-next= ' Next'
        li
          span.icon.icon-other-link= ' Other link'
        li
          span.icon.icon-referral= ' Referral'
        li
          span.icon.icon-resume= ' Resume'
        li
          span.icon.icon-settings= ' Settings'
        li
          span.icon.icon-small-arrow= ' Small arrow'
        li
          span.icon.icon--small.icon-back= ' Small back'
        li
          span.icon.icon--small.icon-next= ' Small next'
        li
          span.icon.icon-support= ' Support'
        li
          span.icon.icon-visa= ' Visa'
      h2 Accessibility
      p To support screen readers all icons should have an appropriate label or text associated with them.
      p Icons can contain text directly, which will be shown and be the text read by the screen reader.
      pre
        code= '<span class="icon icon-github">GitHub</span>'
      p
        = 'If the icon is associated with nearby text, then '
        a(href="https://www.w3.org/TR/wai-aria/states_and_properties#aria-hidden", target="_blank") aria-hidden
        = ' should be used to ensure that the screen reader will not try to read or focus on the icon element.'
      pre
        code= '<span class="icon icon-github" aria-hidden="true" /> <span>GitHub</span>'
      p
        = 'If the icon has no accompanying text, then '
        a(href="https://www.w3.org/TR/wai-aria/states_and_properties#aria-label", target="_blank") aria-label
        = ' should be used, which tells the screen reader what to read when focusing on that icon element.'
      pre
        code= '<span class="icon icon-github" aria-label="github" />'
    #links.section-divider
      .section-divider__heading Links
      .section-divider__links
        a(href="#toc") Scroll to top
    .container
      p Basic <code>a</code> tag with no class.
      p
        a(href="#") I am a link
      pre
        code= '<a href="#">I am a link</a>'
      h2 Navigation link
      p A navigation link with the class <code>.nav-link</code> and <code>.nav-link--active</code> for active links.
      p
        a.nav-link(href="#") I am a nav-link
      p
        a.nav-link.nav-link--active(href="#") I am an active nav-link
      pre
        code
          = '<a href="#" class="nav-link">I am a nav-link</a>\r\n'
          = '<a href="#" class="nav-link nav-link--active">I am an active nav-link</a>'
      h2 Menu link
      p A menu link with the class <code>.menu-link</code>.
      p
        a.menu-link(href="#") I am a menu-link
      pre
        code= '<a href="#" class="menu-link">I am a menu-link</a>'
    #hiding-elements.section-divider
      .section-divider__heading Hiding elements
      .section-divider__links
        a(href="#toc") Scroll to top
    .container
      p.
        We have support for  hidding elements with the <code>.hidden</code> and <code>.hidden--{media-query}</code> class names.
        <code>.hidden</code> will hide elements off screen without needing to use <code>display: none</code>.
      h2 Example
      p.hidden--medium-and-up.
        I am using <code>.hidden--medium-and-up</code> to show up only on <code>small</code> sized devices.
      p.hidden--small.hidden--large-and-up.
        I am using <code>.hidden--small.hidden--large-and-up</code> to show up only on <code>medium</code> sized devices.
      p.hidden--medium-and-down.
        I am using <code>.hidden--medium-and-down</code> to show up only on <code>large</code> and <code>extra-large</code> sized devices;
    #borders.section-divider
      .section-divider__heading Borders
      .section-divider__links
        a(href="#toc") Scroll to top
    .container
      p You can attach borders to elements with the <code>.border--{side}</code> helper classes.
      h2 Examples
      .row
        .col-4
          p.border--bottom I am using <code>.border--bottom</code>
      .row
        .col-4
          p.border--left I am using <code>.border--left</code>
    #header.section-divider
      .section-divider__heading Header
      .section-divider__links
        a(href="#toc") Scroll to top
    .container
      p Our header is a full width header which should not be contained within a <code>.container</code>.
      .header
        .header__logo
          img.hidden--small(src="//placehold.it/217x45", alt="Placeholder logo", width="217", height="45")
          img.hidden--medium-and-up(src="//placehold.it/43x45", alt="Placeholder logo", width="43", height="45")
        .header__nav
          div.hidden--small
            span.gamma.push10--right Lionel Itchy
            span.icon.icon-arrow
          div.hidden--medium-and-up
            span.icon.icon-menu(aria-hidden="true")
            span.gamma= ' Menu'
      pre
        code
          = '<div class="header">\r\n'
          = '  <div class="header__logo">\r\n'
          = '    <img src="..." alt="..." width="217" height="45" />\r\n'
          = '  </div>\r\n'
          = '  <div class="header__nav">\r\n'
          = '    <span>Lionel Itchy</span>\r\n'
          = '    <span class="icon icon-arrow" />\r\n'
          = '  </div>\r\n'
          = '</div>'
    #buttons.section-divider
      .section-divider__heading Buttons
      .section-divider__links
        a(href="#toc") Scroll to top
    .container
      p All buttons must use the base classname of <code>.btn</code> and can be disabled using the <code>.btn--disabled</code> class.
      h2 Primary button
      .row
        .col-3-medium-and-up.col-6-small
          button.btn.btn--primary Primary button
        .col-3-medium-and-up.col-6-small
          button.btn.btn--primary.btn--disabled(disabled="true") Disabled button
      p Primary buttons.
      pre
        code
          = '<button class="btn btn--primary">Primary button</button>\r\n'
          = '<button class="btn btn--primary btn--disabled" disabled="true">Disabled button</button>'
      h2 Secondary button
      .row
        .col-3-medium-and-up.col-6-small
          button.btn.btn--secondary Secondary button
        .col-3-medium-and-up.col-6-small
          button.btn.btn--secondary.btn--disabled(disabled="true") Disabled button
      p Secondary buttons.
      pre
        code
          = '<button class="btn btn--secondary">Secondary button</button>\r\n'
          = '<button class="btn btn--secondary btn--disabled" disabled="true">Disabled button</button>'
      h2 Google sign in button
      .row
        .col-3-medium-and-up.col-6-small
          button.btn.btn--google G+ Sign in with Google
      p Google button.
      pre
        code
          = '<button class="btn btn--secondary">G+ Sign in with Google</button>\r\n'
      h2 Link as a button
      p You can also style an <code>a</code> tag as a button.
      a.btn.btn--primary(href="#") Primary link
      p Link as button.
      pre
        code= '<a href="#" class="btn btn--primary">Primary link</a>'
      h2 Block button
      p A block button will fill the full width of it's parent container and any adjacent buttons will has a small amount of spacing between them.
      .row
        .col-6-medium-and-up.col-12-small
          button.btn.btn--primary.btn--block Primary button
          button.btn.btn--secondary.btn--block Secondary button
      p Block buttons.
      pre
        code
          = '<button class="btn btn--primary btn--block">Primary button</button>\r\n'
          = '<button class="btn btn--secondary btn--block">Secondary button</button>'
      h2 Button with icon
      p Buttons can contain non-text elements like icons.
      .row
        .col-3-medium-and-up.col-6-small
          button.btn.btn--secondary
            span Download
            span.icon.icon-arrow(aria-hidden="true")
      p Button with icon.
      pre
        code
          = '<button class="btn btn--secondary">\r\n'
          = '  <span>Download</span>\r\n'
          = '  <span class="icon icon-arrow" aria-hidden="true" />\r\n'
          = '</button>'
    #forms.section-divider
      .section-divider__heading Forms
      .section-divider__links
        a(href="#toc") Scroll to top
    .container
      h2 Text input
      p <code>.block-input</code> fields will fill the width of their container. Paired with our grid system, we can easily create full and half width input fields.
      .row.push21--bottom
        .col-6-large-and-up.col-12-medium-and-down
          label.block-label Full width input
          input.block-input(type="text", placeholder="Underdog.io")
      .row.push21--bottom
        .col-6-large-and-up.col-12-medium-and-down
          .row
            .col-6
              label.block-label First half
              input.block-input(type="text", placeholder="Lionel")
            .col-6
              label.block-label Second half
              input.block-input(type="text", placeholder="Itchy")
      pre
        code
          = '<div class="row">\r\n'
          = '  <div class="col-12">\r\n'
          = '    <label class="block-label">Full width input</label>\r\n'
          = '    <input class="block-input" type="text" />\r\n'
          = '  </div>\r\n'
          = '</div>\r\n'
          = '<div class="row">\r\n'
          = '  <div class="col-6">\r\n'
          = '    <label class="block-label">First half</label>\r\n'
          = '    <input class="block-input" type="text" />\r\n'
          = '  </div>\r\n'
          = '  <div class="col-6">\r\n'
          = '    <label class="block-label">Second half</label>\r\n'
          = '    <input class="block-input" type="text" />\r\n'
          = '  </div>\r\n'
          = '</div>'
      h2 Disabled text input
      p To disabled a text input you can set the property <code>disabled="true"</code>.
      .row.push21--bottom
        .col-6-large-and-up.col-12-medium-and-down
          label.block-label Disabled
          input.block-input(type="text", disabled="true")
      pre
        code
          = '<label class="block-label">Disabled</label>\r\n'
          = '<input class="block-input" type="text" disabled="true" />'
      h2 Text input with error
      .row.push21--bottom
        .col-6-large-and-up.col-12-medium-and-down
          label.block-label.block-label--error Error
          input.block-input.input--error(type="text", placeholder="lionel.itchy@gmail.com")
      pre
        code
          = '<label class="block-label block-label--error">Error</label>\r\n'
          = '<input class="block-input input--error" type="text" />'
      h2 Submit button
      .row.push21--bottom
        .col-6-large-and-up.col-12-medium-and-down
          button.btn.btn--block.btn--primary(type="submit") Submit button
      pre
        code
          = '<button type="submit" class="btn btn--block btn--primary">Submit button</button>'
      h2 Checkbox
      p To use a normal inline checkbox use the classname of <code>.checkbox</code>.
      .row.push21--bottom
        .col-6-large-and-up.col-12-medium-and-down
          label.checkbox
            input(type="checkbox")
            = 'A checkbox'
      pre
        code
          = '<label class="checkbox">\r\n'
          = '  <input type="checkbox" />\r\n'
          = '  A checkbox\r\n'
          = '</label>'
      h2 Nested checkbox
      p To add a checkbox nested under a parent input use the additional classname of <code>.checkbox--nested</code>.
      .row
        .col-6-large-and-up.col-12-medium-and-down
          label.block-label Text input
          input.block-input(type="text")
      .row.push21--bottom
        .col-6-large-and-up.col-12-medium-and-down
          label.checkbox.checkbox--nested
            input(type="checkbox")
            = 'A nested checkbox'
      pre
        code
          = '<label class="checkbox checkbox--nested">\r\n'
          = '  <input type="checkbox" />\r\n'
          = '  A nested checkbox\r\n'
          = '</label>'
      h2 Radio
      p To use a normal inline radio use the classname of <code>.radio</code>.
      .row
        .col-6-large-and-up.col-12-medium-and-down
          label.radio
            input(type="radio", name="ui-kit--radio")
            = 'A radio'
      .row.push21--bottom
        .col-6-large-and-up.col-12-medium-and-down
          label.radio
            input(type="radio", name="ui-kit--radio")
            = 'A second radio'
      pre
        code
          = '<label class="radio">\r\n'
          = '  <input type="radio" />\r\n'
          = '  A radio\r\n'
          = '</label>'
    #alerts.section-divider
      .section-divider__heading Alerts
      .section-divider__links
        a(href="#toc") Scroll to top
    .container
      p Alerts are full width blocks that can be used to show status messages.
      h2 Normal alert
      .row.push21--bottom
        .col-6-large-and-up.col-12-medium-and-down
          .alert This is the alert message
      pre
        code
          = '<div class="alert">\r\n'
          = '  This is the alert message\r\n'
          = '</div>'
      h2 Alert states
      p Alerts can have a state of <code>.alert--error</code> or <code>.alert--success</code>.
      .row.push21--bottom
        .col-6-large-and-up.col-12-medium-and-down
          .alert.alert--error This is an error message
      .row.push21--bottom
        .col-6-large-and-up.col-12-medium-and-down
          .alert.alert--success This is a success message
      pre
        code
          = '<div class="alert alert--error">\r\n'
          = '  This is an error message\r\n'
          = '</div>\r\n'
          = '<div class="alert alert--success">\r\n'
          = '  This is a success message\r\n'
          = '</div>'
      h2 Alert with close
      p Alerts can optionally contain a <code>.alert__close</code> which is placed at the far right of the alert.
      .row.push21--bottom
        .col-6-large-and-up.col-12-medium-and-down
          .alert.alert--success
            = 'This is a success message'
            button.alert__close
              span.icon.icon-close(aria-label="close")
      pre
        code
          = '<div class="alert alert--success">\r\n'
          = '  This is a success message\r\n'
          = '  <button class="alert__close">\r\n'
          = '    <span class="icon icon-close" aria-label="close" />\r\n'
          = '  </button>\r\n'
          = '</div>'
    #sections.section-divider
      .section-divider__heading Sections
      .section-divider__links
        a(href="#toc") Scroll to top
    .container
      p Sections help to maintain vertical rhythm.
      .section.border--bottom.border--left
        span SECTION
        .section__subsection.border--bottom.border--left SUBSECTION
        .section__subsection.border--bottom.border--left SUBSECTION
      .section.section--pad.border--bottom.border--left
        span SECTION WITH PADDING
        .section__subsection.section__subsection--pad.border--bottom.border--left SUBSECTION WITH PADDING
        span SECTION WITH PADDING CONTINUED
      pre
        code
          = '<div class="section">\r\n'
          = '  <span>SECTION</span>\r\n'
          = '  <div class="section__subsection">SUBSECTION</div>\r\n'
          = '  <div class="section__subsection">SUBSECTION</div>\r\n'
          = '</div>\r\n'
          = '<div class="section section--pad">\r\n'
          = '  <span>SECTION WITH PADDING</span>\r\n'
          = '  <div class="section__subsection section__subsection--pad">\r\n'
          = '    SUBSECTION WITH PADDING\r\n'
          = '  </div>\r\n'
          = '  <span>SECTION WITH PADDING CONTINUED</span>\r\n'
          = '</div>'
    #section-divider.section-divider
      .section-divider__heading Section divider
      .section-divider__links
        a(href="#toc") Scroll to top
    .container
      p A section divider is used to logically separate sections with a header and optional links.
      p A section divider should not be placed within a <code>.container</code>.
      .section-divider
        .section-divider__heading Technical
        .section-divider__links
          .hidden--small
            = 'Download all technical resumes: '
            a(href="#") PDF
            = ' or '
            a(href="#") ZIP
          .hidden--medium-and-up
            span.icon.icon-filter(aria-hidden="true")
            a(href="#") Resumes
      pre
        code
          = '<div class="section-divider">\r\n'
          = '  <div class="section-divider__heading">\r\n'
          = '    Section heading\r\n'
          = '  </div>\r\n'
          = '  <div class="section-divider__links">\r\n'
          = '    <a href="#">Download resumes</a>\r\n'
          = '  </div>\r\n'
          = '</div>'
    #sidebar.section-divider
      .section-divider__heading Sidebar
      .section-divider__links
        a(href="#toc") Scroll to top
    .container
      p A sidebar is used for adding additional navigation to the left side of a page.
      .sidebar
        .sidebar__title Sidebar links
        ul.sidebar__nav
          li
            a(href="#") First link
          li
            a(href="#") Second link
          li
            a.link--active(href="#") Active link
      pre
        code
          = '<div class="sidebar">\r\n'
          = '  <div class="sidebar__title">\r\n'
          = '    Sidebar links\r\n'
          = '  </div>\r\n'
          = '  <ul class="sidebar__nav">\r\n'
          = '    <li>\r\n'
          = '      <a href="#">First link</a>\r\n'
          = '    </li>\r\n'
          = '    <li>\r\n'
          = '      <a href="#" class="link--active">Active link</a>\r\n'
          = '    </li>\r\n'
          = '  </ul>\r\n'
          = '</div>'
